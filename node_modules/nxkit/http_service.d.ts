/// <reference types="node" />
import { Cookie } from './cookie';
import { StaticService } from './static_service';
import { Session } from './session';
import * as http from 'http';
import { RuleResult } from './router';
/**
 * @class HttpService
 * @bases staticService::StaticService
 */
export declare class HttpService extends StaticService {
    private m_cookie;
    private m_session;
    /**
     * @func markReturnInvalid() mark action return invalid
     */
    markReturnInvalid(): void;
    /**
     * site cookie
     * @type {Cookie}
     */
    get cookie(): Cookie;
    get session(): Session;
    /**
     * ajax jsonp callback name
     * @tpye {String}
     */
    readonly jsonpCallback: string;
    /**
     * post form
     * @type {IncomingForm}
     */
    form: any | null;
    /**
     * post form data
     * @type {Object}
     */
    readonly data: Dict;
    /**
     * @constructor
     * @arg req {http.IncomingMessage}
     * @arg res {http.ServerResponse}
     */
    constructor(req: http.IncomingMessage, res: http.ServerResponse);
    /**
     * @overwrite
     */
    action(info: RuleResult): Promise<void>;
    /**
     * @func hasAcceptFilestream(info) 是否接收文件流
     */
    hasAcceptFilestream(info: RuleResult): Promise<boolean> | boolean;
    /**
     * @func auth(info)
     */
    auth(info: RuleResult): Promise<boolean> | boolean;
    /**
     * @fun returnData() return data to browser
     * @arg type {String} #    MIME type
     * @arg data {Object} #    data
     */
    returnData(type: string, data: any): void;
    /**
     * @fun returnString # return string to browser
     * @arg type {String} #    MIME type
     * @arg str {String}
     */
    returnString(str: string, type?: string): void;
    /**
     * @fun returnHtml # return html to browser
     * @arg html {String}
     */
    returnHtml(html: string): void;
    /**
     * @fun rev # return data to browser
     * @arg data {JSON}
     */
    returnJSON(data: any): void;
    /**
     * @fun returnError() return error to browser
     * @arg [err] {Error}
     */
    returnError(err: any): void;
    /**
     * @func returnJSONError(err)
     */
    returnJSONError(err: any): void;
    /**
     * @func returnHtmlError()
     */
    returnHtmlError(err: any): void;
}
/**
 * @class HttpService
 */
export declare class Descriptors extends HttpService {
    descriptors(): Dict<any>;
}
