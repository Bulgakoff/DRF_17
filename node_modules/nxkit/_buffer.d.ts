declare function readBigUIntBE(self: Uint8Array, offset: number, end: number): bigint;
declare function writeBigIntLE(bytes: number[], bigint: bigint): number;
export declare function ERR_BUFFER_OUT_OF_BOUNDS(name?: string): RangeError;
export declare function ERR_OUT_OF_RANGE(str: string, range: string, input: number): RangeError;
export declare function ERR_INVALID_ARG_TYPE(value: any, types: string | string[], arg?: string): TypeError;
export declare function validateNumber(value: any, name?: string): void;
declare function readUInt8(self: Uint8Array, offset?: number): number;
declare function readInt8(self: Uint8Array, offset?: number): number;
declare function readInt16BE(self: Uint8Array, offset?: number): number;
declare function readUInt16BE(self: Uint8Array, offset?: number): number;
declare function readInt32BE(self: Uint8Array, offset?: number): number;
declare function readUInt32BE(self: Uint8Array, offset?: number): number;
declare function readInt40BE(self: Uint8Array, offset?: number): number;
declare function readUInt40BE(self: Uint8Array, offset?: number): number;
declare function readInt48BE(self: Uint8Array, offset?: number): number;
declare function readUInt48BE(self: Uint8Array, offset?: number): number;
declare function readBigInt64BE(self: Uint8Array, offset?: number): bigint;
declare function readBigUInt64BE(self: Uint8Array, offset?: number): bigint;
declare function readBigInt64BE_Compatible(self: Uint8Array, offset?: number): bigint | number;
declare function readBigUInt64BE_Compatible(self: Uint8Array, offset?: number): bigint | number;
declare function readIntBE(self: Uint8Array, offset?: number, byteLength?: number): number;
declare function readUIntBE(self: Uint8Array, offset?: number, byteLength?: number): number;
declare function readFloatForwards(self: Uint8Array, offset?: number): number;
declare function readDoubleForwards(self: Uint8Array, offset?: number): number;
declare function writeInt8(self: Uint8Array, value: number, offset?: number): number;
declare function writeUInt8(self: Uint8Array, value: number, offset?: number): number;
declare function writeInt16BE(self: Uint8Array, value: number, offset?: number): number;
declare function writeUInt16BE(self: Uint8Array, value: number, offset?: number): number;
declare function writeInt32BE(self: Uint8Array, value: number, offset?: number): number;
declare function writeUInt32BE(self: Uint8Array, value: number, offset?: number): number;
declare function writeInt48BE(self: Uint8Array, value: number, offset?: number): number;
declare function writeUInt48BE(self: Uint8Array, value: number, offset?: number): number;
declare function writeBigInt64BE(self: Uint8Array, value: bigint, offset?: number): any;
declare function writeBigUInt64BE(self: Uint8Array, value: bigint, offset?: number): any;
declare function writeIntBE(self: Uint8Array, value: number, offset?: number, byteLength?: number): number;
declare function writeUIntBE(self: Uint8Array, value: number, offset?: number, byteLength?: number): number;
declare function writeFloatForwards(self: Uint8Array, val: number, offset?: number): number;
declare function writeDoubleForwards(self: Uint8Array, val: number, offset?: number): number;
declare const _default: {
    readonly isBigInt: boolean;
    readInt8: typeof readInt8;
    readUInt8: typeof readUInt8;
    readInt16BE: typeof readInt16BE;
    readUInt16BE: typeof readUInt16BE;
    readInt32BE: typeof readInt32BE;
    readUInt32BE: typeof readUInt32BE;
    readInt40BE: typeof readInt40BE;
    readUInt40BE: typeof readUInt40BE;
    readInt48BE: typeof readInt48BE;
    readUInt48BE: typeof readUInt48BE;
    readBigInt64BE: typeof readBigInt64BE;
    readBigUInt64BE: typeof readBigUInt64BE;
    readBigInt64BE_Compatible: typeof readBigInt64BE_Compatible;
    readBigUInt64BE_Compatible: typeof readBigUInt64BE_Compatible;
    readIntBE: typeof readIntBE;
    readUIntBE: typeof readUIntBE;
    readFloatBE: typeof readFloatForwards;
    readDoubleBE: typeof readDoubleForwards;
    readBigUIntBE: typeof readBigUIntBE;
    writeInt8: typeof writeInt8;
    writeUInt8: typeof writeUInt8;
    writeInt16BE: typeof writeInt16BE;
    writeUInt16BE: typeof writeUInt16BE;
    writeInt32BE: typeof writeInt32BE;
    writeUInt32BE: typeof writeUInt32BE;
    writeInt48BE: typeof writeInt48BE;
    writeUInt48BE: typeof writeUInt48BE;
    writeBigInt64BE: typeof writeBigInt64BE;
    writeBigUInt64BE: typeof writeBigUInt64BE;
    writeIntBE: typeof writeIntBE;
    writeUIntBE: typeof writeUIntBE;
    writeFloatBE: typeof writeFloatForwards;
    writeDoubleBE: typeof writeDoubleForwards;
    writeBigIntLE: typeof writeBigIntLE;
};
export default _default;
