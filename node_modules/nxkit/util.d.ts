import * as _common from './_common';
import { EventNoticer, Event } from './event';
declare const _default: {
    id: number;
    options: import("./_pkgutil").Optopns;
    config: Dict<any>;
    debug: boolean;
    onBeforeExit: EventNoticer<Event<number, object>>;
    onExit: EventNoticer<Event<number, object>>;
    onUncaughtException: EventNoticer<Event<Error, object>>;
    onUnhandledRejection: EventNoticer<Event<{
        reason: Error;
        promise: Promise<any>;
    }, object>>;
    isAsync(func: any): boolean;
    getId(): number;
    clone(obj: any): any;
    extend(obj: any, extd: any, end: any): any;
    noop(): void;
    isNull(value: any): boolean;
    extendClass(cls: Function, extds: Function | Function[], end?: Object): Function;
    scopeLock<R>(mutex: any, cb: () => R | Promise<R>): Promise<R>;
    get(name: string, self: any): any;
    set(name: string, value: any, self: any): any;
    del(name: string, self: any): void;
    random(start?: number, end?: number): number;
    fixRandom(arg: number, ...args: number[]): number;
    filter(obj: any, exp: string[] | ((key: string, value: any) => boolean), non?: boolean): any;
    update<T>(obj: T, extd: any): T;
    select<T_1>(default_: T_1, value: any): T_1;
    equalsClass(baseclass: any, subclass: any): boolean;
    assert(condition: any, code?: string | number | ErrnoCode | undefined, ...args: any[]): void;
    sleep<T_2>(time: number, defaultValue?: T_2 | undefined): Promise<T_2>;
    timeout<T_3>(promise: T_3 | Promise<T_3>, time: number): Promise<T_3>;
    promise<T_4 extends any>(executor: (resolve: (value?: T_4 | undefined) => void, reject: (reason?: any) => void, promise: Promise<T_4>) => any): Promise<T_4>;
    currentTimezone: number;
    PromiseNx: typeof _common.PromiseNx;
    version: () => any;
    addNativeEventListener: () => any;
    removeNativeEventListener: () => any;
    gc: () => void;
    runScript: () => any;
    hashCode: (obj: any) => number;
    hash: (data: any) => string;
    nextTick: <A extends any[], R_1>(cb: (...args: A) => R_1, ...args: A) => void;
    platform: "darwin" | "linux" | "win32" | "android" | "freebsd" | "openbsd" | "sunos" | "cygwin" | "netbsd" | "web";
    haveNode: boolean;
    haveNgui: boolean;
    haveWeb: boolean;
    argv: string[];
    webFlags: import("./_util").WebPlatformFlags | null;
    exit: (code?: number | undefined) => void;
    unrealized: () => any;
};
export default _default;
