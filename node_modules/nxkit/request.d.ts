import { IBuffer } from './buffer';
export declare type Params = Dict | null;
export interface Options {
    params?: Params;
    method?: string;
    timeout?: number;
    headers?: Dict<string>;
    dataType?: string;
    signer?: Signer;
    urlencoded?: boolean;
    userAgent?: string;
    cacheTime?: number;
}
export declare function querystringStringify(obj: any, sep?: string, eq?: string): string;
export declare function stringifyXml(obj: any): string;
export interface Result {
    data: any;
    headers: Dict<string>;
    statusCode: number;
    httpVersion: string;
    requestHeaders: Dict<string>;
    requestData: Dict;
}
export declare type PromiseResult = Promise<Result>;
/**
 * @class Signer
 */
export interface Signer {
    sign(path: string, data?: any): Dict<string> | Promise<Dict<string>>;
}
/**
 * @func request
 */
export declare function request(pathname: string, opts: Options): PromiseResult;
export declare function parseJSON(json: string): any;
/**
 * @class Request
 */
export declare class Request {
    private m_user_agent;
    private m_server_url;
    private m_mock;
    private m_mock_switch;
    private m_data_type;
    private m_cache;
    private m_timeout;
    private m_signer?;
    constructor(serverURL: string, mock?: Dict, mockSwitch?: Dict);
    get userAgent(): string;
    set userAgent(v: string);
    get urlencoded(): boolean;
    set urlencoded(v: boolean);
    get dataType(): string;
    set dataType(v: string);
    get serverURL(): string;
    set serverURL(v: string);
    get mock(): Dict<any>;
    set mock(v: Dict<any>);
    get mockSwitch(): Dict<any> | null;
    set mockSwitch(v: Dict<any> | null);
    get timeout(): number | undefined;
    set timeout(value: number | undefined);
    get signer(): Signer | null;
    set signer(value: Signer | null);
    /**
     * @func getRequestHeaders
     */
    getRequestHeaders(): Dict;
    parseResponseData(buf: IBuffer): import("./buffer").InterfaceBuffer;
    request(name: string, method?: string, params?: Params, options?: Options): PromiseResult;
    get(name: string, params?: Params, options?: Options): PromiseResult;
    post(name: string, params?: Params, options?: Options): PromiseResult;
    call(name: string, params?: Params, options?: Options): PromiseResult;
}
declare const _default: {
    Request: typeof Request;
    /**
     * @get userAgent
     */
    readonly userAgent: string;
    /**
     * @func setShared()
     */
    setShared(req: Request): void;
    /**
     * @get shared # default web server
     */
    readonly shared: any;
    /**
     * @func request()
     */
    request: typeof request;
    /**
     * @func get()
     */
    get(url: string, options?: Options): PromiseResult;
    /**
     * @func post()
     */
    post(url: string, options?: Options): PromiseResult;
};
export default _default;
