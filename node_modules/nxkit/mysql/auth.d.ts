/// <reference types="node" />
import * as bf from '../buffer';
declare type Bytes = bf.Bytes | number[];
export declare function xor(a: string, b: string): Buffer;
export declare function sha1(msg: string): string;
export declare function hashPassword(pwd: string | Buffer): Buffer;
export declare function int31Write(buffer: Bytes, number: number[], offset: number): void;
export declare function token(password: string, scramble: Buffer): Buffer;
interface NumberLimit {
    max_value: number;
    max_value_dbl: number;
    seed1: number;
    seed2: number;
}
export declare function randomInit(seed1: number, seed2: number): NumberLimit;
export declare function myRnd(r: NumberLimit): number;
export declare function scramble323(message: Buffer, password: string): Buffer;
export declare function fmt32(x: Bytes): string;
export declare function xor32(a: Bytes, b: Bytes): number[];
export declare function add32(a: Bytes, b: Bytes): number[];
export declare function mul32(a: Bytes, b: Bytes): number[];
export declare function and32(a: Bytes, b: Bytes): number[];
export declare function shl32(a: Bytes, b: number): number[];
export declare function int32Read(buffer: Bytes, offset: number): number;
export {};
