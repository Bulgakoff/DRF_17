import * as wss from '../ws/service';
import * as _center from './_center';
import { WSConversation } from '../ws/conv';
declare type IMPL = _center.FastMessageTransferCenter_IMPL;
/**
 * @class FMTService
 */
export declare class FMTService extends wss.WSService {
    private m_id;
    private m_uuid;
    private m_time;
    private m_user;
    private m_center;
    private m_subscribe;
    private get _center();
    get id(): string;
    get uuid(): string;
    get time(): Date;
    get user(): Dict<any>;
    constructor(conv: WSConversation);
    requestAuth(): Promise<boolean>;
    load(): Promise<void>;
    /**
     * @overwrite
     */
    destroy(): Promise<void>;
    /**
     * @overwrite
     */
    trigger(event: string, data?: any, sender?: string): Promise<void>;
    reportState(event: string, id: string, data?: any): void;
    _repeatForceLogout(): Promise<unknown>;
    /**
     * @func forceLogout() close conv
     */
    forceLogout(): void;
    subscribe({ events }: {
        events: string[];
    }): void;
    unsubscribe({ events }: {
        events: string[];
    }): void;
    hasSubscribe({ event }: {
        event: string;
    }): boolean;
    hasOnline([id]: [string]): Promise<boolean>;
    /**
     * @func triggerTo() event message
     */
    triggerTo([id, event, data]: [string, string, any]): Promise<any>;
    /**
     * @func callTo()
     */
    callTo([id, method, data, timeout]: [string, string, any, number?]): Promise<any>;
    /**
     * @func sendTo()
     */
    sendTo([id, method, data]: [string, string, any]): Promise<any>;
    getUser([id]: [string]): Promise<any>;
}
export declare class FMTServerClient {
    private m_id;
    private m_center;
    get id(): string;
    constructor(center: IMPL, id: string);
    trigger(event: string, data?: any, sender?: string): Promise<any>;
    call(method: string, data?: any, timeout?: number, sender?: string): Promise<any>;
    send(method: string, data?: any, sender?: string): Promise<any>;
    user(): Promise<any>;
}
export {};
