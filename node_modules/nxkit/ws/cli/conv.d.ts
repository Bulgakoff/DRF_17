import { URL } from '../../path';
import { ConversationBasic } from '../_conv';
export * from '../_conv';
import { Signer } from '../../request';
import { EventNoticer } from '../../event';
import * as cli from './index';
/**
 * @class WSConversation
 */
export declare abstract class WSConversation extends ConversationBasic {
    protected m_connecting: boolean;
    protected m_signer: Signer | null;
    private m_IntervalId;
    protected m_url: URL;
    private m_autoReconnect;
    readonly onError: EventNoticer<Error>;
    get autoReconnect(): number;
    set autoReconnect(value: number);
    get keepAliveTime(): number;
    set keepAliveTime(value: number);
    get url(): URL;
    private _keepAlive;
    private _clearKeepAlive;
    private _autoReconnect;
    setGzip(value: boolean): void;
    constructor(path: string);
    protected bindServices(services: string[]): Promise<void>;
    /**
     * @fun bind # 绑定
     * @arg client {Client}
     */
    bind(client: cli.WSClient): void;
    protected _open(): void;
    protected _error(err: Error): void;
    get signer(): Signer | null;
    set signer(value: Signer | null);
    /**
     * @rewrite
     * @func getRequestHeaders
     */
    getRequestHeaders(): Dict;
    /**
     * @fun close # close conversation connection
     */
    close(): void;
    /**
     * @fun connect # connercion server
     */
    connect(): void;
    /**
     * @fun init # init conversation
     */
    abstract initialize(): void;
}
declare const _default: {
    USE_GZIP_DATA: boolean;
};
export default _default;
