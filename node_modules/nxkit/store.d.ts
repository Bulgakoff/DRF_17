import { Notification } from './event';
import { Options as RequestOptions, Signer } from './request';
interface Descriptors {
    type: 'service' | 'event';
    methods: string[];
    events: string[];
}
export interface Options extends RequestOptions {
    sender?: string;
}
export interface Methods {
    [method: string]: (args?: any, opts?: Options) => Promise<any>;
}
export declare class WrapClient extends Notification {
    private m_desc;
    protected m_name: string;
    private m_host;
    private m_cli;
    private m_methods;
    constructor(host: APIStore, name: string, cli: any, desc: Descriptors);
    get methods(): Methods;
    getNoticer(name: string): import("./event").EventNoticer<import("./event").Event<any, object>>;
    protected _call(name: string, full_name: string, ...args: any[]): Promise<any>;
    call(name: string, data?: any, opts?: Options): Promise<any>;
    trigger(name: string, data: any): number;
}
/**
 * @class APIStore
 */
export default class APIStore extends Notification {
    private m_name;
    private m_conv;
    private m_req;
    private m_desc;
    private m_timeoutid;
    private m_signer;
    private m_request_headers;
    private m_port;
    private m_ssl;
    private m_host;
    private m_directory;
    private m_core;
    private m_isloaded;
    get name(): string;
    get descriptors(): Dict<Descriptors>;
    get core(): Dict<WrapClient>;
    constructor(name?: string);
    private _get_wssocket_conv;
    destroy(): void;
    get isLoaded(): boolean;
    get requestHeaders(): Dict<any>;
    setRequestHeaders(headers: Dict): void;
    setSigner(signer: Signer): void;
    initialize(host?: string, port?: string, ssl?: boolean, directory?: string): Promise<void>;
    trigger(name: string, data: any): number;
}
export {};
