/// <reference types="node" />
import { Duplex as DuplexStream } from 'stream';
export declare type AppenData = Buffer | BufferList | Buffer[] | number[] | number | string;
export interface Callbak {
    (err?: Error | null, data?: Buffer): void;
}
export default class BufferList extends DuplexStream {
    private _bufs;
    private _callback;
    length: number;
    constructor(callback?: Callbak | AppenData);
    private _offset;
    append(buf: AppenData): this;
    private _appendBuffer;
    _write(buf: Buffer, encoding?: string, callback?: () => void): void;
    _read(size: number): boolean | undefined;
    end(chunk: any): void;
    get(index: number): number;
    slice(start?: number, end?: number): Buffer;
    copy(dst?: Buffer | null, dstStart?: number, srcStart?: number, srcEnd?: number): Buffer;
    shallowSlice(start?: number, end?: number): BufferList;
    toString(encoding?: string, start?: number, end?: number): string;
    consume(bytes: number): this;
    duplicate(): BufferList;
    destroy(): void;
    readDoubleBE(offset?: number): number;
    readDoubleLE(offset?: number): number;
    readFloatBE(offset?: number): number;
    readFloatLE(offset?: number): number;
    readInt32BE(offset?: number): number;
    readInt32LE(offset?: number): number;
    readUInt32BE(offset?: number): number;
    readUInt32LE(offset?: number): number;
    readInt16BE(offset?: number): number;
    readInt16LE(offset?: number): number;
    readUInt16BE(offset?: number): number;
    readUInt16LE(offset?: number): number;
    readInt8(offset?: number): number;
    readUInt8(offset?: number): number;
}
