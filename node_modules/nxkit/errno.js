"use strict";
/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2015, xuewen.chu
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of xuewen.chu nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL xuewen.chu BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */
Object.defineProperty(exports, "__esModule", { value: true });
class ErrnoList {
    constructor() {
        this.ERR_UNKNOWN_ERROR = [-30000, 'UNKNOWN_ERROR'];
        this.ERR_MONITOR_BEEN_STARTED = [-30001, 'MONITOR BEEN STARTED'];
        this.ERR_MONITOR_NOT_BEEN_STARTED = [-30002, 'MONITOR NOT BEEN STARTED'];
        this.ERR_FORBIDDEN_ACCESS = [-30003, 'FORBIDDEN ACCESS'];
        this.ERR_CONNECTION_DISCONNECTION = [-30004, 'Connection disconnection'];
        this.ERR_CONNECTION_CLOSE_STATUS = [-30005, 'Error connection close status'];
        this.ERR_METHOD_CALL_TIMEOUT = [-30006, 'method call timeout'];
        this.ERR_DOWNLOAD_FAIL = [-30007, 'Download fail'];
        this.ERR_ILLEGAL_ACCESS = [-30008, 'Illegal access'];
        this.ERR_ASSERT_ERROR = [-30009, 'ERR_ASSERT_ERROR'];
        this.ERR_HTTP_REQUEST_FAIL = [-30010, 'http request fail'];
        this.ERR_HTTP_REQUEST_ABORT = [-30011, 'http request abort'];
        this.ERR_HTTP_REQUEST_TIMEOUT = [-30045, 'http request timeout'];
        this.ERR_METHOD_UNREALIZED = [-30046, 'method unrealized'];
        this.ERR_PARAM_TYPE_MISMATCH = [-30047, 'param type mismatch'];
        this.ERR_REPEAT_FNODE_CONNECT = [-30048, 'REPEAT FNODE CONNECT'];
        this.ERR_FMT_CLIENT_OFFLINE = [-30049, 'FMT CLIENT OFFLINE'];
        this.ERR_UNABLE_PARSE_JSONB = [-30050, 'Unable to parse jsonb, data corrupted'];
        this.ERR_FNODE_CONNECT_TIMEOUT = [-30051, 'FNODE CONNECT TIMEOUT'];
        this.ERR_REQUEST_AUTH_FAIL = [-30052, 'REQUEST AUTH FAIL'];
        this.ERR_REPEAT_LOGIN_FMTC = [-30053, 'REPEAT LOGIN FMTC'];
        this.ERR_PREV_PING_NOT_RESOLVE = [-30054, 'Previous Ping not resolved'];
        this.ERR_PING_TIMEOUT = [-30055, 'Ping timeout'];
        this.ERR_BAD_ARGUMENT = [-30056, 'bad argument.'];
        this.ERR_WGET_FORCE_ABORT = [-30057, 'WGET FORCE ABORT'];
        this.ERR_HTTP_REQUEST_STATUS_ERROR = [-30058, 'HTTP_REQUEST_STATUS_ERROR'];
        this.ERR_WGET_RENEWAL_FILE_TYPE_ERROR = [-30059, 'ERR_WGET_RENEWAL_FILE_TYPE_ERROR'];
        this.ERR_WS_CLIENT_NO_ALIVE = [-30060, 'ERR_WS_CLIENT_NO_ALIVE'];
        this.ERR_EXECUTE_TIMEOUT = [-30061, 'ERR_EXECUTE_TIMEOUT'];
    }
}
exports.ErrnoList = ErrnoList;
exports.default = new ErrnoList();
