import './_ext';
import { EventNoticer } from './event';
declare type Platform = 'darwin' | 'linux' | 'win32' | 'android' | 'freebsd' | 'openbsd' | 'sunos' | 'cygwin' | 'netbsd' | 'web';
export interface WebPlatformFlags {
    windows: boolean;
    windowsPhone: boolean;
    linux: boolean;
    android: boolean;
    macos: boolean;
    ios: boolean;
    iphone: boolean;
    ipad: boolean;
    ipod: boolean;
    mobile: boolean;
    touch: boolean;
    trident: boolean;
    presto: boolean;
    webkit: boolean;
    gecko: boolean;
}
interface IProcess {
    getNoticer(name: string): EventNoticer;
    exit(code?: number): void;
}
export declare var _process: IProcess;
/**
    * @fun hash # gen hash value
    * @arg input {Object}
    * @ret {String}
    */
declare function hash(data: any): string;
declare function unrealized(): any;
declare const _default: {
    version: typeof unrealized;
    addNativeEventListener: typeof unrealized;
    removeNativeEventListener: typeof unrealized;
    gc: () => void;
    runScript: typeof unrealized;
    hashCode: (obj: any) => number;
    hash: typeof hash;
    nextTick: <A extends any[], R>(cb: (...args: A) => R, ...args: A) => void;
    platform: Platform;
    haveNode: boolean;
    haveNgui: boolean;
    haveWeb: boolean;
    argv: string[];
    webFlags: WebPlatformFlags | null;
    exit: (code?: number | undefined) => void;
    unrealized: typeof unrealized;
};
export default _default;
