/// <reference types="node" />
import { Notification } from './event';
export declare const log: {
    (message?: any, ...optionalParams: any[]): void;
    (message?: any, ...optionalParams: any[]): void;
};
export declare const error: {
    (message?: any, ...optionalParams: any[]): void;
    (message?: any, ...optionalParams: any[]): void;
};
export declare const dir: {
    (value?: any, ...optionalParams: any[]): void;
    (obj: any, options?: NodeJS.InspectOptions | undefined): void;
};
export declare const warn: {
    (message?: any, ...optionalParams: any[]): void;
    (message?: any, ...optionalParams: any[]): void;
};
export declare class Console extends Notification {
    private m_pathname;
    private m_fd;
    private m_fd_open_time;
    private m_timeStack;
    private m_autoCutFileTime;
    get autoCutFileTime(): number;
    set autoCutFileTime(value: number);
    get fd(): number;
    get pathname(): string;
    constructor(pathname?: string);
    reopen(cut?: boolean): void;
    private _print;
    makeDefault(): this;
    static get defaultInstance(): Console;
    log(msg: any, ...args: any[]): string;
    warn(msg: any, ...args: any[]): string;
    error(msg: any, ...args: any[]): string;
    dir(msg: any, ...args: any[]): string;
    print(tag: string, ...args: any[]): string;
    time(tag?: string): void;
    timeLog(tag?: string, ...data: any[]): void;
    /**
     * @deprecated Use console.timeLog() instead.
     */
    timeline(tag?: string, ...data: any[]): void;
    private _timelog;
    timeEnd(tag?: string): void;
}
export default console;
