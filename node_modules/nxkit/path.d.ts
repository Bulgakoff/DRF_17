/**
 * @class URL
 */
export declare class URL {
    /**
        * @arg [path] {String}
        * @constructor
        */
    constructor(path?: string);
    get href(): string;
    /**
        * full path
        * filename: "/D:/Documents/test.js"
        */
    get filename(): string;
    /**
     * @get path /a/b/s/test.html?aaaaa=100
     */
    get path(): string;
    /**
        * full path dir
        * dirname: "/D:/Documents"
        */
    get dirname(): string;
    get search(): string;
    get hash(): string;
    get host(): string;
    get hostname(): string;
    get origin(): string;
    get basename(): string;
    get extname(): string;
    get port(): string;
    get protocol(): string;
    get params(): Dict<string>;
    set params(value: Dict<string>);
    get hashParams(): Dict<string>;
    set hashParams(value: Dict<string>);
    getParam(name: string): string;
    setParam(name: string, value: string): URL;
    deleteParam(name: string): URL;
    clearParam(): URL;
    getHash(name: string): string;
    setHash(name: string, value: string): URL;
    deleteHash(name: string): URL;
    clearHash(): URL;
    relative(targetPath: string): string;
    toJSON(): string;
}
declare const _default: {
    URL: typeof URL;
    /**
     * @func isAbsolute(path) is absolute path
     */
    isAbsolute: (path: string) => boolean;
    /**
     * @func resolve(path) resolve path
     */
    resolve: (...args: string[]) => string;
    /**
     * @func fallbackPath()
     */
    fallbackPath: (url: string) => string;
    /**
     * full filename
     */
    basename(path?: string | undefined): string;
    /**
     * full filename
     */
    dirname(path?: string | undefined): string;
    /**
     * full filename
     */
    extname(path?: string | undefined): string;
    /**
     * full filename
     */
    filename(path?: string | undefined): string;
    /**
     * full path
     */
    path(path?: string | undefined): string;
    search(path?: string | undefined): string;
    hash(path?: string | undefined): string;
    host(path?: string | undefined): string;
    hostname(path?: string | undefined): string;
    origin(path?: string | undefined): string;
    port(path?: string | undefined): string;
    protocol(path?: string | undefined): string;
    params(path?: string | undefined): Dict<string>;
    hashParams(path?: string | undefined): Dict<string>;
    getParam(name: string, path?: string | undefined): string;
    setParam(name: string, value: string, path?: string | undefined): string;
    deleteParam(name: string, path?: string | undefined): string;
    clearParam(path?: string | undefined): string;
    getHash(name: string, path?: string | undefined): string;
    setHash(name: string, value: string, path?: string | undefined): string;
    deleteHash(name: string, path?: string | undefined): string;
    clearHash(path?: string | undefined): string;
    relative(path: string, target: string): string;
    executable: () => string;
    documents: (path?: string | undefined) => string;
    temp: (path?: string | undefined) => string;
    resources: (path?: string | undefined) => string;
    chdir: (cwd: string) => boolean;
    cwd: () => string;
};
export default _default;
