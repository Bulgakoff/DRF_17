declare type ArrayNumber = ArrayLike<number>;
declare function encodeUTF8Word(unicode: number): number[];
declare function encodeUTF8WordLength(unicode: number): number;
declare function encodeUTF8Length(str: string): number;
declare function encodeUTF8(str: string): number[];
declare function encodeLatin1From(str: string): number[];
declare function encodeAsciiFrom(str: string): number[];
declare function encodeHexFrom(bytes: ArrayNumber, start: number, end: number): string;
declare function encodeBase64From(bytes: ArrayNumber, start: number, end: number): string;
declare function decodeUTF8Word(bytes: ArrayNumber, offset: number): number[];
declare function decodeUTF8From(bytes: ArrayNumber, start: number, end: number): string;
declare function decodeUTF8(bytes: ArrayNumber): string;
declare function decodeLatin1From(bytes: ArrayNumber, start: number, end: number): string;
declare function decodeAsciiFrom(bytes: ArrayNumber, start: number, end: number): string;
declare function decodeHex(str: string): number[];
declare function decodeBase64(str: string): number[];
declare function convertHexString(bytes: ArrayNumber): string;
declare function convertBase64String(bytes: ArrayNumber): string;
declare const _default: {
    encodeUTF8Word: typeof encodeUTF8Word;
    encodeUTF8: typeof encodeUTF8;
    encodeLatin1From: typeof encodeLatin1From;
    encodeAsciiFrom: typeof encodeAsciiFrom;
    encodeHexFrom: typeof encodeHexFrom;
    encodeBase64From: typeof encodeBase64From;
    decodeUTF8Word: typeof decodeUTF8Word;
    decodeUTF8From: typeof decodeUTF8From;
    decodeUTF8: typeof decodeUTF8;
    decodeLatin1From: typeof decodeLatin1From;
    decodeAsciiFrom: typeof decodeAsciiFrom;
    decodeHex: typeof decodeHex;
    decodeBase64: typeof decodeBase64;
    convertHexString: typeof convertHexString;
    convertBase64String: typeof convertBase64String;
    encodeUTF8WordLength: typeof encodeUTF8WordLength;
    encodeUTF8Length: typeof encodeUTF8Length;
};
export default _default;
